-------------p1---------------


#include <iostream>
#include <GL/glut.h>

float ax = 100, ay = 100, bx = 200, by = 130;
void draw_pixel(float x, float y)
{
  glBegin(GL_POINTS);
  glVertex2f(x, y);
  glEnd();
}

void bres()
{
  float dx = bx - ax, dy = by - ay;
  float m = dy / dx;
  float inc = 1;
  if (m < 0)
  {
    inc = -1;
  }
  dx = abs(dx);
  dy = abs(dy);
  if (abs(m) < 1)
  {
    if (bx < ax)
    {
      swap(ax, bx);
      swap(ay, by);
    }
    float x = ax, y = ay;
    draw_pixel(x, y);
    float p = 2 * dy - dx;
    while (x < bx)
    {
      if (p < 0)
        p += 2 * dy;
      else
      {
        y += inc;
        p += 2 * dy - 2 * dx;
      }
      x++;
      draw_pixel(x, y);
    }
  }
  else
  {
    if (by < ay)
    {
      swap(ax, bx);
      swap(ay, by);
    }
    float x = ax, y = ay;
    draw_pixel(x, y);
    float p = 2 * dx - dy;
    while (y < by)
    {
      if (p < 0)
        p += 2 * dx;
      else
      {
        x += inc;
        p += 2 * dx - 2 * dy;
      }
      y++;
      draw_pixel(x, y);
    }
  }
}

void display()
{
  glClear(GL_COLOR_BUFFER_BIT);
  glColor3f(0, 0, 1);
  bres();
  glColor3f(1, 0, 0);
  glPointSize(3);
  draw_pixel(ax, ay);
  draw_pixel(bx, by);
  glFlush();
}
void myinit()
{
  glClearColor(1, 1, 1, 1);
  glMatrixMode(GL_PROJECTION);
  gluOrtho2D(0, 499, 0, 499);
  glMatrixMode(GL_MODELVIEW);
}
int main(int argc, char **argv)
{
  cout << "enter endpoints (x1,y1),(x2,y2)";
  cin >> ax >> ay >> bx >> by;
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
  glutInitWindowSize(500, 500);
  glutCreateWindow("Bresenhman's line drawing algorithm");
  myinit();
  glutDisplayFunc(display);
  glutMainLoop();
  return 0;
}


----------------p2-----------------

#include <GL/glut.h>
#include <stdio.h>
#include <math.h>
float x[3][3] = {{0, 100, 50}, {0, 0, 50}, {1, 1, 1}};
float r[3][3];
void myinit()
{
  glClearColor(1, 1, 1, 0);
  gluOrtho2D(-100, 500, -100, 500);
}
void triangle(float x[3][3])
{
  glColor4s(1, 1, 1, 0);
  glBegin(GL_TRIANGLES);
  glVertex2f(x[0][0], x[1][0]);
  glVertex2f(x[0][1], x[1][1]);
  glVertex2f(x[0][2], x[1][2]);
  glEnd();
}
void matrixmul(float mul[3][3])
{
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++)
    {
      r[i][j] = 0;
      for (int k = 0; k < 3; k++)
        r[i][j] = r[i][j] + mul[i][k] * x[k][j];
    }
}
void translation()
{
  float t[3][3] = {{1, 0, 100}, {0, 1, 0}, {0, 0, 1}};
  printf("Enter the values of tx and ty");
  scanf("%f %f", &t[0][2], &t[1][2]);
  matrixmul(t);
  triangle(r);
}
void scaling()
{
  float s[3][3] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
  printf("Enter the values of sx and sy");
  scanf("%f %f", &s[0][0], &s[1][1]);
  matrixmul(s);
  triangle(r);
}

void rotation()
{
  float theta = 0;
  printf("Enter the angle");
  scanf("%f", &theta);
  float angle = theta * 3.14 / 180;
  float cosx = cos(angle);
  float sinx = sin(angle);
  float rr[3][3] = {{cosx, -sinx, 0}, {sinx, cosx, 0}, {0, 0, 1}};
  matrixmul(rr);
  triangle(r);
}
void displayme()
{
  glClear(GL_COLOR_BUFFER_BIT);
  glColor3d(1, 0, 0);
  int ch;
  printf("Enter the choice \n0 for normal triangle \n1 for translation \n2 for scaling \n3 for rotation \n");
  while (1)
  {
    scanf("%d", &ch);
    glColor3d(1, 1, 1);
    switch (ch)
    {
    case 0:
      triangle(x);
      break;
    case 1:
      translation();
      break;
    case 2:
      scaling();
      break;
    case 3:
      rotation();
      break;
    case 4:
      exit(0);
      break;
    }
    glColor3d(1, 0, 0);
    triangle(x);
    glFlush();
  }
}

int main(int argc, char **argv)
{
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_SINGLE);
  glutInitWindowSize(500, 500);
  glutCreateWindow("Line drawing algorithm");
  myinit();
  glutDisplayFunc(displayme);
  glutMainLoop();
  return 0;
}


-------------------p3------------------

#include <GL/glut.h>
#define ORIGINAL 1
#define TRANSLATE 2
#define ROTATEZ 3
#define ROTATE_PV 4
#define SCALE 5

int TRANSFORM = ORIGINAL;
float tx = 50, ty = 50, tz = 0, theta = 60, px = -50, py = -10;
float sx = 2.0, sy = 2.0; // Scale factors

void obj()
{
  glColor3f(0.6, 0.6, 0.7);
  glBegin(GL_POLYGON);
  glVertex2f(-50, -10);
  glVertex2f(50, -10);
  glVertex2f(50, 30);
  glVertex2f(-50, 30);
  glEnd();
  glColor3f(0.7, 0.8, 0.8);
  glBegin(GL_POLYGON);
  glVertex2f(-40, 30);
  glVertex2f(-30, 55);
  glVertex2f(40, 55);
  glVertex2f(45, 30);
  glEnd();
  glColor3f(0.2, 0.2, 0.2);
  glPointSize(20);
  glBegin(GL_POINTS);
  glVertex2f(-35, -5);
  glVertex2f(35, -5);
  glEnd();
}

void display()
{
  glClear(GL_COLOR_BUFFER_BIT);
  switch (TRANSFORM)
  {
  case ORIGINAL:
    obj();
    break;
  case TRANSLATE:
    glPushMatrix();
    glTranslatef(tx, ty, tz);
    obj();
    glPopMatrix();
    break;
  case ROTATEZ:
    glPushMatrix();
    glRotatef(theta, 0, 0, 1);
    obj();
    glPopMatrix();
    break;
  case ROTATE_PV:
    glPushMatrix();
    glTranslatef(px, py, 0);
    glRotatef(theta, 0, 0, 1);
    glTranslatef(-px, -py, 0);
    obj();
    glPopMatrix();
    break;
  case SCALE:
    glPushMatrix();
    glScalef(sx, sy, 1.0); // Apply scaling transformation
    obj();
    glPopMatrix();
    break;
  }
  glFlush();
}

void myinit()
{
  glClearColor(1, 1, 1, 1);
  glMatrixMode(GL_PROJECTION);
  gluOrtho2D(-250, 250, -250, 250);
  glMatrixMode(GL_MODELVIEW);
}

void rotMenu(int id)
{
  switch (id)
  {
  case ROTATEZ:
    TRANSFORM = ROTATEZ;
    break;
  case ROTATE_PV:
    TRANSFORM = ROTATE_PV;
    break;
  }
  glutPostRedisplay();
}

void menu(int id)
{
  switch (id)
  {
  case 0:
    exit(0);
  case ORIGINAL:
    TRANSFORM = ORIGINAL;
    break;
  case TRANSLATE:
    TRANSFORM = TRANSLATE;
    break;
  case SCALE:
    TRANSFORM = SCALE;
    break;
  }
  glutPostRedisplay();
}

int main(int argc, char **argv)
{
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
  glutCreateWindow("2D transformation");
  myinit();
  int rid = glutCreateMenu(rotMenu);
  glutAddMenuEntry("Rotate about z(60)", ROTATEZ);
  glutAddMenuEntry("Rotate about pivot", ROTATE_PV);
  glutCreateMenu(menu);
  glutAddMenuEntry("Exit", 0);
  glutAddMenuEntry("Original", ORIGINAL);
  glutAddMenuEntry("Translate", TRANSLATE);
  glutAddMenuEntry("Scale", SCALE);
  glutAddSubMenu("Rotate", rid);
  glutAttachMenu(GLUT_RIGHT_BUTTON);
  glutDisplayFunc(display);
  glutMainLoop();
  return 0;
}

--------------------p4----------------------------

#include <GL/glut.h>
#include <iostream>
float v[4][3] = {{0, 0, 1}, {-1, -1, -1}, {1, -1, -1}, {0, 1, -1}};
int k = 0;

void triangle(float a[3], float b[3], float c[3])
{
  glBegin(GL_TRIANGLES);
  glVertex3fv(a);
  glVertex3fv(b);
  glVertex3fv(c);
  glEnd();
}
void divide_triangle(float a[3], float b[3], float c[3], int k)
{
  if (k > 0)
  {
    float m1[3], m2[3], m3[3];
    for (int i = 0; i < 3; i++)
    {
      m1[i] = (a[i] + b[i]) / 2;
      m2[i] = (a[i] + c[i]) / 2;
      m3[i] = (b[i] + c[i]) / 2;
    }
    divide_triangle(a, m1, m2, k - 1);
    divide_triangle(b, m1, m3, k - 1);
    divide_triangle(c, m2, m3, k - 1);
  }
  else
  {
    triangle(a, b, c);
  }
}
void tetrahedron()
{
  glColor3f(0, 0, 0);
  divide_triangle(v[1], v[2], v[3], k);
  glColor3f(1, 0, 0);
  divide_triangle(v[0], v[1], v[3], k);
  glColor3f(0, 0, 1);
  divide_triangle(v[0], v[2], v[3], k);
  glColor3f(1, 1, 0);
  divide_triangle(v[0], v[1], v[2], k);
}
void display()
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glPushMatrix();
  // glRotatef(45,1,0,0);
  tetrahedron();
  glPopMatrix();
  glFlush();
}
void myinit()
{
  glClearColor(1, 1, 1, 1);
  glMatrixMode(GL_PROJECTION);
  glOrtho(-2, 2, -2, 2, -2, 2);
  glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char **argv)
{
  cout << "Enter subdivision";
  cin >> k;
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE | GLUT_DEPTH);
  glutInitWindowSize(500, 500);
  glutCreateWindow("3D transformation");
  myinit();
  glutDisplayFunc(display);
  glEnable(GL_DEPTH_TEST);
  glutMainLoop();
  return 0;
}

---------------p5-----------------------



#include <GL/glut.h>
float thetax = 0, thetay = 0, thetaz = 0;
int flag = 0;

void car()
{
  glColor3f(1, 0, 0);
  glutWireCube(1);

  glColor3f(1, 1, 0);
  glPushMatrix();
  glTranslatef(0.75, -0.25, 0);
  glScalef(0.5, 0.5, 1);
  glutWireCube(1);
  glPopMatrix();
}
void display()
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glPushMatrix();
  glRotatef(thetax, 1, 0, 0);
  glRotatef(thetay, 0, 1, 0);
  glRotatef(thetaz, 0, 0, 1);
  car();
  glPopMatrix();
  glFlush();
}
void myinit()
{
  glMatrixMode(GL_PROJECTION);
  glOrtho(-2, 2, -2, 2, -2, 2);
  glMatrixMode(GL_MODELVIEW);
}

void mouse(int button, int state, int x, int y)
{
  if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    thetax += 0.4;
  else if (button == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN)
    thetay += 0.4;
  else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    thetaz += 0.4;

  if (thetax >= 360)
    thetax -= 360;
  if (thetay >= 360)
    thetay -= 360;
  if (thetaz >= 360)
    thetaz -= 360;
  glutPostRedisplay();
}

int main(int argc, char **argv)
{
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE | GLUT_DEPTH);
  glutInitWindowSize(500, 500);
  glutCreateWindow("3D Transformation");
  myinit();
  glutDisplayFunc(display);
  glutMouseFunc(mouse);
  glEnable(GL_DEPTH_TEST);
  glutMainLoop();
  return 0;
}


-----------------------p6-----------------------



#include <GL/glut.h>
float theta[3] = {0, 0, 0};
int axis = 2;
#define CUBE 1
#define ICOSAHEDRON 2
#define TETRAHEDRON 3
#define CONE 4
#define TEAPOT 5
int OBJ = CUBE;
void display()
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glLoadIdentity();
  glPushMatrix();
  glColor3f(1, 1, 0);
  glRotatef(theta[0], 1, 0, 0);
  glRotatef(theta[1], 0, 1, 0);
  glRotatef(theta[2], 0, 0, 1);
  switch (OBJ)
  {
  case CUBE:
    glutSolidCube(2);
    break;
  case ICOSAHEDRON:
    glutSolidIcosahedron();
    break;
  case TETRAHEDRON:
    glutSolidTetrahedron();
    break;
  case CONE:
    glutSolidCone(2, 3, 20, 20);
    break;
  case TEAPOT:
    glutSolidTeapot(2);
    break;
  }

  glPopMatrix();
  glutSwapBuffers();
}

void myinit()
{
  glMatrixMode(GL_PROJECTION);
  glOrtho(-5, 5, -5, 5, -20, 20);
  glMatrixMode(GL_MODELVIEW);
}

void idle()
{
  theta[axis] += 0.4;
  if (theta[axis] >= 360)
    theta[axis] -= 360;
  glutPostRedisplay();
}
void mouse(int button, int state, int x, int y)
{
  if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    axis = 0;
  else if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    axis = 1;
  else if (button == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN)
    axis = 2;
  glutPostRedisplay();
}

void menu(int id)
{
  switch (id)
  {
  case 1:
    OBJ = CUBE;
    break;
  case 2:
    OBJ = ICOSAHEDRON;
    break;
  case 3:
    OBJ = TETRAHEDRON;
    break;
  case 4:
    OBJ = CONE;
    break;
  case 5:
    OBJ = TEAPOT;
    break;
  }

  glutPostRedisplay();
}

int main(int argc, char **argv)
{
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
  glutInitWindowSize(500, 500);
  glutCreateWindow("Animation");
  myinit();
  glutDisplayFunc(display);
  glutIdleFunc(idle);
  glutMouseFunc(mouse);
  glEnable(GL_DEPTH_TEST);
  glutCreateMenu(menu);
  glutAddMenuEntry("cube", 1);
  glutAddMenuEntry("Icosahedron", 2);
  glutAddMenuEntry("Tetrahedron ", 3);
  glutAddMenuEntry("Cone", 4);
  glutAddMenuEntry("Teapot", 5);
  glutAttachMenu(GLUT_RIGHT_BUTTON);
  glutMainLoop();
  return 0;
}




----------------------p7-----------------



import cv2 as cv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
img=cv.imread('puppy.png')
h,w,channels=img.shape
#print(h,w,channels)
# img_rgb=img[:,:,::-1]
# img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)
# plt.imshow(img_gray,cmap='gray')
cy=h//2
cx=w//2
a=img[0:cy,0:cx]
b=img[0:cy,cx:w]
c=img[cy:h,0:cx]
d=img[cy:h,cx:w]
plt.subplot(221);plt.imshow(a)
plt.subplot(222);plt.imshow(b)
plt.subplot(223);plt.imshow(c)
plt.subplot(224);plt.imshow(d)
plt.show()




---------------------p8----------------------



import cv2 as cv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
img=cv.imread('puppy.png')
img_rgb=img[:,:,::-1]
h,w,channels=img.shape
matplotlib.rc('figure',figsize=[10,8])
a=cv.rotate(img_rgb,cv.ROTATE_90_CLOCKWISE)
b=cv.rotate(img_rgb,cv.ROTATE_90_COUNTERCLOCKWISE)
c=cv.rotate(img_rgb,cv.ROTATE_180)
d=cv.resize(img_rgb,(w,h))
e=cv.resize(img_rgb,None,fx=2,fy=2,interpolation=cv.INTER_LINEAR)
f=cv.resize(img_rgb,None,fx=1.5,fy=0.5)
tx=100;ty=0.5
m=np.float32([[1,0,tx],[0,1,ty]])
g=cv.warpAffine(img_rgb,m,(w,h))
l=[a,b,c,d,e,f,g]
for i in range(len(l)):
    plt.subplot(3,3,i+1)
    plt.imshow(l[i])
plt.show()


--------------------p9--------------------


import cv2 as cv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
img_messi=cv.imread('messi.jpeg')
img_messsi_gray=cv.cvtColor(img_messi,cv.COLOR_BGR2GRAY)
img_canny=cv.Canny(img_messsi_gray,threshold1=100,threshold2=200)
img_chess=cv.imread('chessboard.png')
img_chess_gray=cv.cvtColor(img_chess,cv.COLOR_BGR2GRAY)
img_float=np.float32(img_chess_gray)
dest=cv.cornerHarris(img_float,2,5,0.07)
img_chess[dest>0.01*dest.max()]=[0,0,255]
l=[img_canny,img_messi,img_chess]
for i in range(3):
    plt.subplot(2,2,i+1)
    plt.imshow(l[i])
plt.show()



----------------------p10---------------



import cv2 as cv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
img_messi=cv.imread('messi.jpeg')
img_messi_rgb=cv.cvtColor(img_messi,cv.COLOR_BGR2RGB)
blur=cv.blur(img_messi_rgb)
gblur=cv.GaussianBlur(img_messi_rgb,(5,5),0)
l=[img_messi_rgb,blur,gblur]
for i in range(3):
    plt.subplot(2,2,i+1)
    plt.imshow(l[i])
plt.show()



---------------------p11----------------


import cv2 as cv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
img_messi=cv.imread('chessboard.png')
img_messi_rgb=cv.cvtColor(img_messi,cv.COLOR_BGR2GRAY)
img_canny=cv.Canny(img_messi_rgb,threshold1=100,threshold2=200)
h,c=cv.findContours(img_canny,cv.RETR_TREE,cv.CHAIN_APPROX_SIMPLE)
cv.drawContours(img_messi,h,-1,(0,255,0),3)
plt.imshow(img_messi)
plt.show()




----------------p12---------------------


import cv2 as cv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
img=cv.imread('faces.png')
img_gray=cv.cvtColor(img,cv.COLOR_BGR2GRAY)
f_c=cv.CascadeClassifier(cv.data.haarcascades+'haarcascade_frontalface_default.xml')
faces=f_c.detectMultiScale(img_gray,1.3,2)
for x,y,w,h in faces:
    cv.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)
img[:,:,::-1]
plt.imshow(img[:,:,::-1])
plt.show()







