//Program 1
#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>

int x1, y11, x2, y2;

void init() {
    glClearColor(1, 1, 1, 1); // Set background color to white
    gluOrtho2D(0, 500, 0, 500); // Set the coordinate system
}

void plotpoint(int x, int y) {
    glColor3f(1, 0, 0); // Set point color to red
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

void LineBres(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int incx = (x2 > x1) ? 1 : -1;
    int incy = (y2 > y1) ? 1 : -1;
    int x = x1;
    int y = y1;
    int p;

    if (dx > dy) {
        p = 2 * dy - dx;
        for (int i = 0; i <= dx; i++) {
            plotpoint(x, y);
            x += incx;
            if (p < 0) {
                p += 2 * dy;
            } else {
                y += incy;
                p += 2 * dy - 2 * dx;
            }
        }
    } else {
        p = 2 * dx - dy;
        for (int i = 0; i <= dy; i++) {
            plotpoint(x, y);
            y += incy;
            if (p < 0) {
                p += 2 * dx;
            } else {
                x += incx;
                p += 2 * dx - 2 * dy;
            }
        }
    }
}

void Display() {
    // glClear(GL_COLOR_BUFFER_BIT); // Clear the window
    LineBres(100, 500 ,300 ,155);
}

int main(int argc, char **argv) {
    printf("Enter 2 points (x1 y1 x2 y2): ");
    // scanf("%d%d%d%d", &x1, &y11, &x2, &y2);

    glutInit(&argc, argv);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Line Drawing");
    init();
    glutDisplayFunc(Display);
    glutMainLoop();
    return 0;
}






-------------Program 2-------------

#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
float x[3][3] = {{0, 100, 50}, {0, 0, 50}, {1, 1, 1}};
float r[3][3];
void myinit()
{
    glClearColor(1, 1, 1, 0);
    gluOrtho2D(-100, 500, -100, 500);
}
void triangle(float x[3][3])
{
    glColor4s(1, 1, 1, 0);
    glBegin(GL_TRIANGLES);
    glVertex2f(x[0][0], x[1][0]);
    glVertex2f(x[0][1], x[1][1]);
    glVertex2f(x[0][2], x[1][2]);
    glEnd();
}
void matrixmul(float mul[3][3])
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            r[i][j] = 0;
            for (int k = 0; k < 3; k++)
            {
                r[i][j] = r[i][j] + mul[i][k] * x[k][j];
            }
        }
    }
}
void translation()
{
    float t[3][3] = {{1, 0, 100}, {0, 1, 0}, {0, 0, 1}};
    printf("Enter the values of Tx and Ty: ");
    scanf("%f %f", &t[0][2], &t[1][2]);
    matrixmul(t);
    triangle(r);
}
void scaling()
{
    float s[3][3] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
    printf("Enter the values of Sx and Sy: ");
    scanf("%f %f", &s[0][0], &s[1][1]);
    matrixmul(s);
    triangle(r);
}
void rotation()
{
    float theta = 0;
    printf("Enter the angle: ");
    scanf("%f", &theta);
    float angle = theta * 3.14 / 180;
    float cosx = cos(angle);
    float sinx = sin(angle);
    float rr[3][3] = {{cosx, -sinx, 30}, {sinx, cosx, 40}, {0, 0, 1}};
    matrixmul(rr);
    triangle(r);
}
void displayMe()
{
    while (1)
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glColor3d(1, 0, 0);
        int ch;
        printf("Enter the choice: \n0: For Normal Triangle \n1:For Translation \n2: For Scaling \n3: For Rotation \n4: Exit \n");
        scanf("%d", &ch);
        glColor3d(1, 1, 1); // Color of the Object
        switch (ch)
        {
        case 0:
            triangle(x);
            break;
        case 1:
            translation();
            break;
        case 2:
            scaling();
            break;
        case 3:
            rotation();
            break;
        case 4:
            exit(0);
        default:
            printf("Enter a valid choice!");
        }
        glColor3d(1, 0, 0);
        triangle(x);
        glFlush();
    }
}
int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Program-2");
    myinit();
    glutDisplayFunc(displayMe);
    glutMainLoop();
    return 0;
}




-------------program 3-------------
#include <GL/glut.h>
#include <stdio.h>
void myinit()
{
    gluOrtho2D(-500, 500, -500, 500);
}
void drawTriangle()
{
    glBegin(GL_TRIANGLES);
    glVertex2f(100, 100);
    glVertex2f(200, 100);
    glVertex2f(150, 150);
    glEnd();
}
void translate()
{
    glPushMatrix();
    glTranslated(100, 0, 0);
    drawTriangle();
    glPopMatrix();
}
void rotate_triangle()
{
    glPushMatrix();
    glRotated(45, 0, 0, 1);
    drawTriangle();
    glPopMatrix();
}
void pivot_point_rotate()
{
    glColor3f(0, 0, 0);
    glPushMatrix();
    glTranslated(100, 100, 0);
    glRotated(45, 0, 0, 1);
    glTranslated(-100, -100, 0);
    drawTriangle();
    glPopMatrix();
}
void scale_triangle()
{
    glPushMatrix();
    glScaled(2, 2, 1);
    drawTriangle();
    glPopMatrix();
}
void pivot_point_scale()
{
    glColor3f(0, 0, 0);
    glPushMatrix();
    glTranslated(100, 100, 0);
    glScaled(2, 2, 1);
    glTranslated(-100, -100, 0);
    drawTriangle();
    glPopMatrix();
}
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1, 1, 1, 0);
    glColor3f(1, 1, 0);
    drawTriangle();
    glFlush();
}
void menu_rotate(int id)
{
    switch (id)
    {
    case 1:
        translate();
        break;
    case 2:
        rotate_triangle();
        break;
    case 3:
        pivot_point_rotate();
        break;
    case 4:
        scale_triangle();
        break;
    case 5:
        pivot_point_scale();
        break;
    default:
        exit(0);
    }
}
int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Transformation");
    myinit();
    glutDisplayFunc(display);
    glutCreateMenu(menu_rotate);
    glutAddMenuEntry("Translate", 1);
    glutAddMenuEntry("Rotation about origin", 2);
    glutAddMenuEntry("Rotation about fixed point", 3);
    glutAddMenuEntry("Scale about origin", 4);
    glutAddMenuEntry("Scale about fixed point", 5);
    glutAddMenuEntry("EXIT", 6);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutMainLoop();
    return 0;
}




-----------------Program 4-----------------
#include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>
typedef float point[3];
point v[] = {
    {0.0, 0.0, 1.0},
    {0.0, 1.0, 0.0},
    {-1.0, -1.0, 0.0},
    {1.0, -1.0, 0.0}};
int n;
void triangle(point a, point b, point c)
{
    glBegin(GL_TRIANGLES);
    glVertex3fv(a);
    glVertex3fv(b);
    glVertex3fv(c);
    glEnd();
}
void divide_tri(point a, point b, point c, int m)
{
    point v1, v2, v3;
    int j;
    if (m > 1)
    {
        for (j = 0; j < 3; j++)
            v1[j] = (a[j] + b[j]) / 2;
        for (j = 0; j < 3; j++)
            v2[j] = (a[j] + c[j]) / 2;
        for (j = 0; j < 3; j++)
            v3[j] = (c[j] + b[j]) / 2;
        divide_tri(a, v1, v2, m - 1);
        divide_tri(c, v2, v3, m - 1);
        divide_tri(b, v3, v1, m - 1);
    }
    else
    {
        triangle(a, b, c);
    }
}
void tetrahedron(int m)
{
    glColor3f(1.0, 0.0, 0.0);
    divide_tri(v[0], v[1], v[2], m);
    glColor3f(0.0, 0.0, 0.0);
    divide_tri(v[3], v[2], v[1], m);
    glColor3f(0.0, 1.0, 0.0);
    divide_tri(v[0], v[3], v[1], m);
    glColor3f(0.0, 0.0, 1.0);
    divide_tri(v[0], v[2], v[3], m);
}
void display()
{
    tetrahedron(n);
    glFlush();
}
void myinit()
{
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glOrtho(-2.0, 2.0, -2.0, 2.0, -2.0, 2.0);
}
int main(int argc, char **argv)
{
    printf("\nEnter the number of recursive steps you want:");
    scanf("%d", &n);
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Ex 8: 3d Sierpinski's Gasket");
    glutDisplayFunc(display);
    myinit();
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
    return 0;
}



-----------------Program 5-----------------
#include <GL/glut.h>
float ambient[] = {1, 1, 1, 1};
float light_pos[] = {2, 2, 2, 1};
void align()
{
    glRotated(50, 0, 1, 0);
    glRotated(10, -1, 0, 0);
    glRotated(11, 0, 0, -1);
}
void obj(double tx, double ty, double tz, double sx, double sy, double sz)
{
    align();
    glTranslated(tx, ty, tz);
    glScaled(sx, sy, sz);
    glutSolidCube(1);
    glLoadIdentity();
}
void display()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // three walls
    obj(0, 0, 0.5, 1, 1, 0.04);
    obj(-0.5, 0, 0, -0.04, 1, 1);
    obj(0, -0.5, 0, 1, 0.04, 1);
    // table top
    obj(0.2, -0.2, -0.2, 0.6, 0.04, 0.6);
    // four table legs
    obj(-0.2, -0.4, -0.25, 0.02, 0.2, 0.02);
    obj(-0.16, -0.4, 0.16, 0.02, 0.2, 0.02);
    obj(0.2, -0.4, 0.2, 0.02, 0.2, 0.02);
    obj(0.2, -0.4, -0.2, 0.02, 0.2, 0.02);
    align();
    glTranslated(0.3, -0.1, -0.3);
    glutSolidTeapot(0.09);
    glFlush();
    glLoadIdentity();
}

void main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(700, 700);
    glutCreateWindow("Teapot");
    glutDisplayFunc(display);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    // glMaterialfv(GL_FRONT, GL_AMBIENT, ambient);
    // glLightfv(GL_LIGHT0, GL_POSITION, light_pos);
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
}




-----------------Program 6-----------------
#include <GL/glut.h>
float ambient[]={1,0,0,1};
float light_pos[]={2,2,2,1};
static float theta[3] = {0,0,0};
int axis = 0;
int ch=1;
void mouse(int button, int state, int x, int y)
{
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
        axis = 0;
    if(button == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN)
        axis = 1;
    if(button == GLUT_RIGHT_BUTTON && state == GLUT_UP)
        axis = 2;
}
void idle(){
    theta[axis] += 2;
    if(theta[axis] > 360)
        theta[axis] = 0;
    glutPostRedisplay();
    }
void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glClearColor(1,1,1,1);
    glLoadIdentity();
    glRotatef(theta[0],1,0,0);  // rotation about x
    glRotatef(theta[1],0,1,0); // rotate about y
    glRotatef(theta[2],0,0,1); // rotate about z
    if(ch==1)
    	glutSolidCube(1);
    if(ch==2)
    	glutSolidTeapot(0.5);
    if(ch==3)
    	glutSolidCone(0.5,0.5,20,20);
    glFlush();
    glutSwapBuffers();  // use whenever you use double buffer
}
void menu(int id)
{
switch(id)
{
	case 1:
		ch=1;
		break;
	case 2:
		ch=2;
		break;
	case 3:
		ch=3;
		break;
}
}
int main(int argc, char ** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500,500);
    glutCreateWindow("Color Cube");
    glutCreateMenu(menu);
	glutAddMenuEntry("Cube",1); 
	glutAddMenuEntry("Teapot",2);
	glutAddMenuEntry("Cone",3);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutDisplayFunc(display);
    glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glMaterialfv(GL_FRONT,GL_AMBIENT,ambient);
	glLightfv(GL_LIGHT0,GL_POSITION,light_pos);
    glutMouseFunc(mouse); 
    glutIdleFunc(idle);
    glShadeModel(GL_SMOOTH);
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
    return 0;
}


-------------Program 7 4 Images-------------


import cv2
import matplotlib.pyplot as plt


image=cv2.imread('car_image.jpg')
img_mat=cv2.cvtColor(image,cv2.COLOR_BGR2RGB);

h,w,_=img_mat.shape
img_x,img_y=w//2,h//2

tl=img_mat[:img_y,:img_x]
tr=img_mat[:img_y,img_x:]
bl=img_mat[img_y:,:img_x]
br=img_mat[img_y:,img_x:]

plt.figure(figsize=(10,10))
plt.axis('off')

plt.subplot(2,2,1)
plt.imshow(tl)
plt.subplot(2,2,2)
plt.imshow(tr)
plt.subplot(2,2,3)
plt.imshow(bl)
plt.subplot(2,2,4)
plt.imshow(br)

plt.show()


-------------Program 8 (Trans,rot,scale)-------------
import cv2
import matplotlib.pyplot as plt
import numpy as np

image=cv2.imread('car_image.jpg')
img_mat=cv2.cvtColor(image,cv2.COLOR_BGR2RGB);


h,w,_=img_mat.shape
img_x,img_y=w//2,h//2
center=(img_x,img_y)

trans_matrix=np.float32([[1,0,100],[0,1,200]])
trans=cv2.warpAffine(img_mat,trans_matrix,(w,h))

scale_matrix=np.float32([[2,0,0],[0,2,0]])
scale=cv2.warpAffine(img_mat,scale_matrix,(w,h))

rotate_matrix=cv2.getRotationMatrix2D(center,60,1)
rotate=cv2.warpAffine(img_mat,rotate_matrix,(w,h))

fig,axs=plt.subplots(3,1)
# fig.set_size_inches(10,10)
plt.tight_layout()

axs[0].set_title('transalted')
axs[0].imshow(trans)

axs[1].set_title('scaled')
axs[1].imshow(scale)

axs[2].set_title('rotated')
axs[2].imshow(rotate)

plt.show()


-------------Program 9 (Low level features)-------------

# Read image and extract low level features such as edges, filtering techniques

import cv2
import matplotlib.pyplot as plt

img=cv2.imread('car_image.jpg')
img_gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
img_edges=cv2.Canny(img,100,100)
plt.figure(figsize=(10,10))
plt.subplot(1,2,1)
plt.imshow(img_gray,cmap='gray')
plt.subplot(1,2,2)
plt.imshow(img_edges)
plt.show()

-------------Program 10 (Blurr)-------------
import cv2 as cv
import matplotlib.pyplot as plt

# Read the image
img = cv.imread('/content/car_image.jpg')

# Convert the image to RGB
img_rgb = cv.cvtColor(img, cv.COLOR_BGR2RGB)

# Apply average blur with a larger kernel size
img_avgBlur = cv.blur(img_rgb, (30, 30))  # Increase kernel size to (50, 50)

# Apply Gaussian blur with a larger kernel size
img_gBlur = cv.GaussianBlur(img_rgb, (91, 91), 0)  # Increase kernel size to (51, 51); Gaussian blur kernel size should be odd

# List of images and their titles
images = [img_rgb, img_avgBlur, img_gBlur]
titles = ['Original', 'Blur', 'Smooth']

# Plot the images
plt.figure(figsize=(15, 15))  # Adjust the figure size for better visualization
for i in range(3):
    plt.subplot(1, 3, i + 1)
    plt.title(titles[i])
    plt.imshow(images[i])
    plt.axis('off')  # Hide axis for better visualization

# Show the plot
plt.show()



-------------Program 11 (Chessboard)-------------
import cv2 as cv
import matplotlib.pyplot as plt

# Read the image and convert to grayscale
img = cv.imread('chess.png')
img_gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

# Detect edges and find contours
img_edges = cv.Canny(img_gray, 100, 200)
contours, _ = cv.findContours(img_edges, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

# Draw contours on the original image
cv.drawContours(img, contours, -1, (0, 255, 0), 5)

# Display the image with contours
plt.imshow(img)
plt.axis('off')  # Hide axis
plt.show()


-------------Program 12 (Face)-------------
# WAP to detect faces in an image

import cv2 as cv
import matplotlib.pyplot as plt

img = cv.imread('faces.jpg')
img_gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
fc = cv.CascadeClassifier(cv.data.haarcascades + 'haarcascade_frontalface_default.xml')
faces = fc.detectMultiScale(img_gray, 1.3, 2)
for (x, y, w, h) in faces:
    cv.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 2)

img_rgb = cv.cvtColor(img, cv.COLOR_BGR2RGB)

plt.imshow(img_rgb)
plt.axis('off')  # Hide axis
plt.show()



---Program 5 ALt--------

#include<GL/glut.h>
float thetax=0,thetay=0,thetaz=0;
int flag=0;

void car(){
glColor3f(1,0,0);
glutWireCube(1);

}
void display(){
glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
glPushMatrix();
glRotatef(thetax,1,0,0);
glRotatef(thetay,0,1,0);
glRotatef(thetaz,0,0,1);
car();
glPopMatrix();
glFlush();
}
void myinit(){
// glMatrixMode(GL_PROJECTION);
glOrtho(-2,2,-2,2,-2,2);
// glMatrixMode(GL_MODELVIEW);
}

void mouse(int button,int state,int x,int y){
if(button==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
thetax+=5;
else if(button==GLUT_MIDDLE_BUTTON && state==GLUT_DOWN)
thetay+=5;
else if(button==GLUT_RIGHT_BUTTON && state==GLUT_DOWN)
thetaz+=5;


if(thetax>=360) thetax-=360;
if(thetay>=360) thetay-=360;
if(thetaz>=360) thetaz-=360;
glutPostRedisplay();
}

int main(int argc,char **argv){
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_RGB|GLUT_SINGLE|GLUT_DEPTH);
glutInitWindowSize(500,500);
glutCreateWindow("3D Transformation");
myinit();
glutDisplayFunc(display);
glutMouseFunc(mouse);
glEnable(GL_DEPTH_TEST);
glutMainLoop();
return 0;
}


